<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.ssm.crm.mappers.StorageMapper">
	<sql id="queryCondition">
		<where>
			1 = 1
			<if test="productname != null">
				AND p.name LIKE #{productname}
			</if>
			<if test="wareHouse">
				AND ware_house LIKE #{wareHouse}
			</if>
		</where>
	</sql>
	<select id="getTotalElements" resultType="long">
		select count(*) from
		(select s.id
		from storages s
		left outer join
		products p
		on s.product_id = p.id
		<include refid="queryCondition"></include>
		)
	</select>
	<select id="getContent" resultType="com.atguigu.ssm.crm.entity.Storage">
		select * from
		(select rownum rn, s.id, s.memo, stock_count, stock_ware,
		ware_house, product_id as "product.id", p.name as "product.name"
		from
		storages s
		left outer join products p
		on s.product_id = p.id
		<include refid="queryCondition"></include>
		)
		<![CDATA[
			where rn >= #{firstIndex} and rn < #{endIndex}
		]]>
	</select>
	<select id="getStorageById" resultType="com.atguigu.ssm.crm.entity.Storage">
		select s.id, s.memo,
		stock_count, stock_ware, ware_house, product_id as "product.id",
		p.name as "product.name"
		from storages s
		left outer join products p
		on
		s.product_id = p.id
		where s.id = #{id}
	</select>
	<insert id="save">
		insert into storages(id, memo, stock_count,
		stock_ware, ware_house, product_id) values (crm_seq.nextVal, #{memo}, #{stockCount}, #{stockWare}, #{wareHouse}, #{product.id})
	</insert>
	<update id="update">
		update storages
		set stock_count = #{stockCount}
		where id = #{id}
	</update>
	<delete id="delete">
		delete from storages
		where id = #{id}
	</delete>
</mapper>