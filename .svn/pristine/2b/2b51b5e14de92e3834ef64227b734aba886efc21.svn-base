package com.atguigu.ssm.crm.handler;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.util.WebUtils;

import com.atguigu.ssm.crm.entity.SalesChance;
import com.atguigu.ssm.crm.model.Page;
import com.atguigu.ssm.crm.service.SalesChanceService;
import com.atguigu.ssm.crm.service.UserService;
import com.atguigu.ssm.crm.utils.DataProcessUtils;

@Controller
@RequestMapping("/chance")
public class SalesChanceHander {

	@Autowired
	private SalesChanceService salesChanceService;
	
	@Autowired
	private UserService userService;
	/*
	 * @RequestMapping(value="/list", method=RequestMethod.GET) public String
	 * listChances(@RequestParam(value="pageNo", required=false)String
	 * pageNoStr, Map<String, Object> map){ int pageNo = 1; try { pageNo =
	 * Integer.parseInt(pageNoStr); } catch (NumberFormatException e) { }
	 * Page<SalesChance> page = salesChanceService.getPage(pageNo);
	 * 
	 * map.put("page", page); return "/chance/list"; }
	 */

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String input(Map<String, Object> map) {
		map.put("chance", new SalesChance());
		return "/chance/input";
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	public String save(SalesChance chance) {
		salesChanceService.save(chance);
		return "redirect:/chance/list";
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public String input(@RequestParam("id") Integer id, Map<String, Object> map) {
		map.put("chance", salesChanceService.get(id));
		return "/chance/input";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
	public String update(@PathVariable("id") Long id, SalesChance chance) {
		chance.setId(id);
		salesChanceService.update(chance);

		return "redirect:/chance/list";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public String delete(@PathVariable("id") Integer id) {
		salesChanceService.delete(id);
		return "redirect:/chance/list";
	}

	@RequestMapping("/list")
	public String listChances(
			@RequestParam(value = "pageNo", required = false) String pageNoStr,
			Map<String, Object> map, HttpServletRequest request) {
		int pageNo = 1;
		try {
			pageNo = Integer.parseInt(pageNoStr);
		} catch (NumberFormatException e) {
		}

		Map<String, Object> params = WebUtils.getParametersStartingWith(
				request, "search_");
		String queryString = DataProcessUtils.encodeParamsToQueryString(params);
		map.put("queryString", queryString);
		
		Page<SalesChance> page = salesChanceService.getPage(pageNo, params);

		map.put("page", page);
		return "/chance/list";
	}

	
	@RequestMapping(value="/dispatch", method=RequestMethod.GET)
	public String dispatch(@RequestParam("id")Integer id, Map<String, Object> map){
		SalesChance salesChance = salesChanceService.get(id);
		map.put("chance", salesChance);
		map.put("users", userService.getUserList());
		return "/chance/dispatch";
	}
	
	@RequestMapping(value="/dispatch", method=RequestMethod.POST)
	public String dispatch(SalesChance chance){
		salesChanceService.dispath(chance);
		return "redirect:/chance/list";
	}
	
	@RequestMapping("/finish")
	public String finish(@RequestParam("id") Integer id, 
			RedirectAttributes attributes){
		salesChanceService.finish(id);
		attributes.addFlashAttribute("message", "完成开发成功!");
		return "redirect:/plan/chance/list";
	}
	@RequestMapping("/stop")
	public String stop(@RequestParam("id") Integer id, 
			RedirectAttributes attributes){
		salesChanceService.stop(id);
		attributes.addFlashAttribute("message", "完成开失败!");
		return "redirect:/plan/chance/list";
	}
	
	@RequestMapping("/detail")
	
	public String detail(@RequestParam("id")Integer id, Map<String, Object> map){
		SalesChance chance = salesChanceService.getPlanChance(id);
		map.put("chance", chance);
		return "/plan/detail";
	}
}
